{
  //-------------------------------------------------------------------------------------
  // 공통 정보.

  "common": {
    "ip": "127.0.0.1", // 노드마다 공통으로 사용하는 IP. (머신의 IP를 지정)
    "meetEndPoints": ["127.0.0.1:16000"], // 대상 노드의 common IP와 ipcPort 등록. (해당 서버 endpoint 포함가능 , 리스트로 여러개 가능)
    "keepAliveTime": 10000,
    "nodeTimeout": 180000, // 노드의 상태 체크 타임아웃. (0 이면 체크하지 않음)
    "defaultReqTimeout": 30000, // 노드간 메세지 라우팅 타임아웃. (0 이면 타임아웃 없음)
    "defaultAsyncAwaitTimeout": 30000, // Blocking 호출시 타임아웃.
    "ipcPort": 16000, // 다른 ipc nodeinfo 와 통신할때 사용되는 port
    "publisherPort" : 13300, // publish socket 을 위한 port
    "debugMode": false, // 절대 서비스에서는 true를 사용하지 마시오! 디버깅시 각종 timeout 이 발생안하도록 하는 옵션 , 리얼에서는 반드시 false 이어야 한다.
    "allocatorType": 4,
    //    ("1") POOLED_DIRECT_BUFFER,
    //    ("2") POOLED_HEAP_BUFFER,
    //    ("3") UNPOOLED_DIRECT_BUFFER,
    //    ("4") UNPOOLED_HEAP_BUFFER,
	
	"gameNodeSelectionMode": 0, // 0: Round-Robin, 1: Idle
    "nodeInfoUpdateTime": 10,
    "nodeInfoUpdateBusyTime": 12,
    "nodeInfoManagerRefreshTime": 4,

    "loopInfoSamplingCount": 5,
    "maxLoopTime" : 10,
    "enableLoopInfoMonitor" : true,

    "maxUserCount" : 2500,
    "addLocWeight": 16,
    
    "httpClientOption": {
      "keepAlive": true,
      "connTimeout": 5000,
      "requestTimeout": 10000,
      "maxConnPerHost" : 10000,
      "maxConn": 12000
    },

	// TTL 적용 대상: NonNetworkNode, Group, User 중 하나로 메시지가 전달되는 순간 1씩 차감

	// MatchUserTimeout의 예

	// 하나의 머신에 모든 노드가 올라가 있을 경우
	//   MatchNode -> GameNode (9)
	//   GameNode -> GameUser(8)
	//   GameUser-> RpsGatewayNode(7)


	// 여러개의 머신에 각 노드가 종류별로 분산되어 있을 경우
	//   MatchNode -> MatchNode의 IpcNode (9)
	//   MatchNode의 IpcNode -> Game의 IpcNode (8)
	//   IpcNode -> GameNode (7)
	//   GameNode -> GameUser (6)
	//   GameUser-> GatewayNode의 IpcNode (5)
	//   IpcNode -> RpsGatewayNode (4)


	// CreateRoomReq의 예

	// 하나의 머신에 모든 노드가 올라가 있을 경우
	//   Client -> RpsGatewayNode (9)
	//   RpsGatewayNode -> GameNode (8)
	//   GameNode -> GameUser (7)
	//   GameUser -> GameUser (6) : CreateRoomReq -> CreateRoomReqRelay 로 변경해서 relay
	//   GameUser -> GameGroup (5)

	"ttl": 10, // packet의 ttl값
	"ttlAutoTrace": 4, // ttl이 이 값 이하로 떨어지면 auto trace 시작

    "packetMonitoring": false // 패킷 종류별 개수, 사이즈 등 모니터링 하고자 할 경우 사용. (디폴트 false)
  },

  //-------------------------------------------------------------------------------------
  // LocationNode 설정
  "location": {
    "clusterSize": 1, // 총 몇개의 머신(VM)으로 구성되는가?
    "replicaSize": 3, // 복제 그룹의 크기 (master + slave의 개수)
    "shardFactor": 3,  // sharding을 위한 인수 (아래의 주석 참고)

    // 전체 shard의 개수 = clusterSize x replicaSize x shardFactor
    // 하나의 머신(VM)에서 구동할 shard의 개수 = replicaSize x shardFactor
    // 고유한 shard의 총 개수 (master 샤드의 개수) = clusterSize x shardFactor

	"checkLocationCycle": 60000, // Loc 정보의 유효성 체크를 할 주기
	"checkLocationTimeout": 3600000 // Loc 정보의 유효성 체크를 할 timeout값
  },

  "match": {
    "nodeCnt": 1,
    "useLocationDirect": true,
    "scaleOutLimit": { // OPTINAL
      "cycleSec": 300,		// 평균값을 측정하기 위한 주기
      "cpuPct": 90, 		// 프로세스의 CPU 사용량이 이 값을 초과할 경우
      "queueSize": 500000,	// UserMatchMaker의 평균 매칭큐 사이즈가 50만개를 초과할 경우
      "roomSize": 1000000,	// RoomMatchMaker의 평균 전체방의 개수가 100만개를 초과할 경우
      "cpuWarningPct": 75 // 프로세스의 CPU 사용량이 이 값을 초과할 경우 워닝 로그를 출력
    }
  },

  //-------------------------------------------------------------------------------------
  // 클라이언트와의 커넥션을 관리하는 노드.

  "gateway": {
	"ip": "127.0.0.1", // 클라이언트와 연결되는 IP.
	
    "nodeCnt": 4, // 노드 개수. (노드 번호는 0 부터 부여 됨)
	"workerThreads": 4,		// netty worker thread의 개수	
	"senderThreads": 4,		// sender Thread의 수. 특별한 이유가 없으면 설정하지 마시오. (기본값: GatewayNode의 수)
	"maxConcurrent": 15000, // 하나의 JVM 상에서 처리할 수 있는 최대 접속 수 (GatewayNetworkNode당 최대 동접수)
	"overridePooledHeapBuffer": false, // true: common에서 설정한 AllocatorType과 상관없이 netty는 PooledHeapBuffer.DEFAULT 사용
	
    "dns": "", // 클라이언트와 연결되는 도메인 주소.
    "maintenance": false,
    "traffic":{
      "maxCount": 0 //초당 최대 메시지 허용 개수
    },
    "tcpNoDelay": false, // Netty Bootstrap 설정시 사용 됨. (디폴트로 필드 미사용 및 기본 값 false)
    "checkTransactionTime": false, // req <-> res 패킷에 대한 stream in-out 시간 측정 여부. (기본 값 false)
    "connectGroup": { // 커넥션 종류.

      "TCP_SOCKET": {
        "port": 11200, // 클라이언트와 연결되는 포트.
        "idleClientTimeout": 240000 // 데이터 송수신이 없는 상태 이후의 타임아웃. (0 이면 사용하지 않음)
        //        ,"secure": { // 보안 설정.
        //          "useSelf": true
        ////          ,"keyCertChainPath": "tardis.crt" // 인증서 경로.
        ////          ,"privateKeyPath": "privatekey.pem" // 개인 키 경로.
        //        }
      },
      "WEB_SOCKET": {
        "port": 11400,
        "idleClientTimeout": 0
        //        ,"secure": {
        //          "useSelf": true
        ////          ,"keyCertChainPath": "tardis.crt"
        ////          ,"privateKeyPath": "privatekey.pem"
        //        }
      }
    },

    "duplicateLoginServices": {
      "ChatService": ["GameService"],
      "GameService": ["ChatService"],
      "ForTestCase": []
    }
  },

  //-------------------------------------------------------------------------------------
  // 게임 로비 역할을 하는 노드. (게임 룸, 유저를 포함 하고있음)

  "game": [
    {
      "nodeCnt": 8,
      "serviceId": 1,
      "serviceName": "ChatService",
      "channelIDs": ["1","2","3","4","1","2","3","4"], // 노드마다 부여할 채널 ID. (유니크하지 않아도 됨. "" 문자열로 채널 구분없이 중복사용도 가능)
      "userTimeout": 50000, // disconnect 이후의 유저객체 제거 타임아웃.
	  "disconnectionTimeout": 10000,
      "safeCreateTime": 1000 //테스트 위해서 설정 보통 설정 필요 없음 기본 60초
    },
    {
      "nodeCnt": 8,
      "serviceId": 2,
      "serviceName": "GameService",
      "channelIDs": ["1","2","3","4","1","2","3","4"],
      "userTimeout": 50000,
	  "disconnectionTimeout": 10000
    }
  ],

  //-------------------------------------------------------------------------------------
  // DB 등, 부가적인 서비스를 구성할 수 있는 노드.

  "support": [
    {
      "nodeCnt": 1,
      "serviceId": 10,
      "serviceName": "SampleService",
      "restIp": "127.0.0.1",
      "restPort": 17260
    }
  ],

  //-------------------------------------------------------------------------------------
  // JMX 또는 REST API 사용하여 다른 노드에 대한 관리를 할 수 있는 노드. (서비스 포즈, 전체 유저 카운트 등)
  "management": {
    "nodeCnt": 2,
    "restIp": "127.0.0.1",
    "restPort": 25150,
    "consoleProxyPort" : 18081, // admin web console port

    "db": {
      "user": "root",
      "password": "1234",
      "url": "jdbc:h2:mem:gameflex_admin;DB_CLOSE_DELAY=-1"
    }
  }
}
